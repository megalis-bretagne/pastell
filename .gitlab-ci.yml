include:

  - project: "libriciel/integration-continue/templates"
    ref: master
    file: '/publish-container-to-registry.yml'

  - project: "libriciel/integration-continue/templates"
    ref: master
    file: '/security-check.yml'

stages:
    - build
    - static-analysis
    - test
    - quality
    - deploy
    - staging

variables:
    CONTAINER_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}"
    CONTAINER_IMAGE_22: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}_ubuntu_22"
    MYSQL_DATABASE: pastell_test
    MYSQL_USER: user
    MYSQL_PASSWORD: user
    MYSQL_RANDOM_ROOT_PASSWORD: "yes"
    MYSQL_HOST_TEST: 'mysql'
    MYSQL_HOST: 'mysql'
    MYSQL_PORT: '3306'
    PASTELL_SITE_BASE: 'https://localhost/'

build:
  stage: build
  tags:
    - docker-build
  variables:
    GITHUB_API_TOKEN: "${GITHUB_API_TOKEN}"
  script:
    - date=$(date)
    - sed -i "s/%CI_BUILD_ID%/${CI_PIPELINE_ID}/" ./manifest.yml
    - sed -i "s/%BUILD_DATE%/$date/" ./manifest.yml
    - sed -i "s/%VERSION%/${CI_COMMIT_REF_NAME}/" ./manifest.yml
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --build-arg GITHUB_API_TOKEN=$GITHUB_API_TOKEN --target pastell_dev --pull -t ${CONTAINER_IMAGE} .
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push ${CONTAINER_IMAGE}

lint:
  stage: static-analysis
  image : "$CONTAINER_IMAGE"
  variables:
    DONT_INIT_DATABASE: "true"
    DONT_RETRIEVE_VALIDCA: "true"
  script:
    - cd /var/www/pastell
    - composer phpcs

phpstan:
  stage: static-analysis
  image : "$CONTAINER_IMAGE"
  variables:
    DONT_INIT_DATABASE: "true"
    DONT_RETRIEVE_VALIDCA: "true"
  script:
    - cd /var/www/pastell
    - composer phpstan

#Note: il semble que le fichier entrypoint soit exécuté deux fois !
# https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/issues/1380
# Ca permet de tester l'idempotence de fichier entrypoint, mais c'est pas super quand même

unit_test:
    stage: test
    image : "$CONTAINER_IMAGE"
    variables:
      GIT_STRATEGY: none
      COMPOSER_PROCESS_TIMEOUT: 1200
      DONT_RETRIEVE_VALIDCA: "true"
    services:
        - mysql:5.7.23
    script:
        - cd /var/www/pastell
        - php -dpcov.enabled=1 -dpcov.directory=. vendor/bin/phpunit --coverage-text --colors=never --coverage-clover coverage/coverage.xml --log-junit coverage/logfile.xml
        - cp -rf coverage $CI_PROJECT_DIR
    artifacts:
        paths:
            - coverage
        expire_in: 1h

quality:
  stage: quality
  only:
    - master
  image : gitlab.libriciel.fr:4567/docker/sonar-scanner:latest
  script:
    - mkdir -p /var/www/pastell
    - cp -rf $CI_PROJECT_DIR/* /var/www/pastell
    - cd /var/www/pastell
    - /sonar-scanner -Dsonar.login=$SONAR_LOGIN -Dsonar.host.url=$SONAR_HOST_URL

acceptance_test:
    stage: test
    variables:
        GIT_STRATEGY: none
        REDIS_SERVER: redis
        REDIS_PORT: 6379
        PASTELL_SITE_BASE: https://localhost:4443/
    image :  "$CONTAINER_IMAGE"
    services:
        - mysql:5.7.23
        - redis:latest
    script:
        - cd /var/www/pastell
        - echo "" > .env
        - /bin/bash -c "source /etc/apache2/envvars && exec /usr/sbin/apache2"
        - composer codecept
    artifacts:
        when: on_failure
        paths:
            - /var/www/pastell/test/codeception/tests/output/

security_scan:
  allow_failure: true
  before_script:
    - cp .trivyignore /

deploy_dev:
    stage: staging
    environment:
        name: pastell-4-0.dev.libriciel.net
        url: https://pastell-4-0.dev.libriciel.net
    only:
        - master
    variables:
        PAYLOAD: "payload={\"text\": \"[pastell-4-0.dev.libriciel.net](https://pastell-4-0.dev.libriciel.net) a été mis à jour - [build $CI_PIPELINE_ID]($CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID)\"}"
    script:
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$SSH_PRIVATE_KEY")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - scp ./docker/docker-compose.yml gitlab@pastell-4-0.dev.libriciel.net:/data/docker-file/docker-compose.yml
        - echo "$DEV_ENV_FILE_CONTENT" > /tmp/.env
        - scp /tmp/.env gitlab@pastell-4-0.dev.libriciel.net:/data/docker-file/
        - ssh -tt gitlab@pastell-4-0.dev.libriciel.net "docker login -u gitlab-ci-token -p '$CI_JOB_TOKEN' $CI_REGISTRY && cd /data/docker-file/ && docker-compose pull && docker-compose up -d"
        - curl -i -X POST -d "$PAYLOAD" $MATTERMOST_WEBHOOK

